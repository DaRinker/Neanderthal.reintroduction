#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May 17 13:15:13 2018

@author: rinkerd

Script integrates dictionaries generated by previous scripts to identify RAAs and RHAs
More refinded filtering can be preformed on the output files (e.g. thresholding on AF)

"""

import os
import sys
import gzip
import pickle


#minrequiredLD = sys.argv[1]	#minimum LD an additional SNP has to show between at least one neand tagSNPs
minrequiredLD = 1.0 

#load pre-generated dictionaries...

print("loading dictionaries...")  

addSNPs2haploLDpopulations = pickle.load(open('obj/addSNPs2haploLDpopulations.pkl', 'rb'))	# output from LDsnps_summarize_v2.py
addSNPs2oneKG = pickle.load(open('obj/addSNPs2oneKG.pkl', 'rb'))	# output from gatherVCFinfo_1kg.py
addSNPs2Altai = pickle.load(open('obj/addSNPs2Altai.pkl', 'rb'))	# output from gatherVCFinfo_Altai.py
addSNPs2AFinAFR = pickle.load(open('obj/addSNPs2AFinAFR.pkl', 'rb'))	# output from ancestry_AF_calc.py

## 1_V16_to_1KG_LD_extract.py --> pop + 'hap2rsq.dict.pkl'
## 2_tag.AF.calc.py creates --> tagSNP2AF.pkl
## 3_LDsnps_summarize_v2.py  --(tagSNP2AF.pkl, pop + 'hap2rsq.dict.pkl')--> addSNPs2haploLDpopulations.pkl
## 4_gatherVCFinfo_Altai.py --(addSNPs2haploLDpopulations.pkl)--> addSNPs2Altai.pkl
## 5_gatherVCFinfo_1kg.py --(addSNPs2haploLDpopulations.pkl)--> addSNPs2oneKG.pkl
## 6_ancestry_AF_calc.py --(addSNPs2haploLDpopulations.pkl)--> addSNPs2AFinAFR.pkl

print("all dictionaries loaded.")	

addSNP_FAIL_Altai_filter = []
addSNP_het_in_Altai = []
addSNP_noAA_call = []
addSNP_maskedAA = []
ambigious_introgression = []
raaEAS = []
raaEUR = []
raaSAS = []
candidate_rhaEAS = []
candidate_rhaEUR = []
candidate_rhaSAS = []
raEAS = []
raEUR = []
raSAS = []
AAcall = ['A','C','G','T']
AAmasked = ['a','c','t','g']
AAnocall = ['.','-']

print("collecting RAAs...")

for (CHR, LOC) in addSNPs2haploLDpopulations:

	if (CHR,LOC) not in addSNPs2oneKG:
		continue

	ancAllele = addSNPs2oneKG[CHR, LOC][0][8]
	
	if ancAllele in AAmasked:
		ancAllele = "masked"
	if ancAllele in AAnocall:
		ancAllele = "no_call"

	##_collect RAAs...
	for i in addSNPs2haploLDpopulations[CHR,LOC]:
		if i[1] >= minrequiredLD:
			
			addSNP_AFinEAS = float(addSNPs2oneKG[CHR,LOC][0][3])
			addSNP_AFinEUR = float(addSNPs2oneKG[CHR,LOC][0][6])
			addSNP_AFinSAS = float(addSNPs2oneKG[CHR,LOC][0][7])
			addSNP_AFinAFR = float(addSNPs2AFinAFR[CHR,LOC][0])
			INTROallele = []
			V16_LD_hap = []

			if i[0]=='EAS':
				INTROfreq = i[6]
				V16_LD_hap = i[5]
				REF = addSNPs2oneKG[CHR,LOC][0][0]
				ALT = addSNPs2oneKG[CHR,LOC][0][1]

				if abs(addSNP_AFinEAS - INTROfreq) < abs((1 - addSNP_AFinEAS) - INTROfreq):
					INTROallele = addSNPs2oneKG[CHR,LOC][0][1] # intorgressed allele must be ALT
					oneKGstatus = 'ALT'
					nonINTROallele = addSNPs2oneKG[CHR,LOC][0][0]
				else:
					INTROallele = addSNPs2oneKG[CHR,LOC][0][0] # intorgressed allele must be REF
					oneKGstatus = 'REF'
					nonINTROallele = addSNPs2oneKG[CHR,LOC][0][1]

				if oneKGstatus == 'ALT':
					INTRO_AFinAFR = addSNP_AFinAFR
				elif oneKGstatus =='REF' :
					INTRO_AFinAFR = 1 - addSNP_AFinAFR

				if INTROallele == ancAllele:
					raaEAS.append((CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,INTRO_AFinAFR,ancAllele,oneKGstatus,V16_LD_hap))
				else:
					candidate_rhaEAS.append((CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,INTRO_AFinAFR,ancAllele,oneKGstatus,V16_LD_hap))
					
			if i[0]=='EUR':
				INTROfreq = i[6]
				V16_LD_hap = i[5]
				REF = addSNPs2oneKG[CHR,LOC][0][0]
				ALT = addSNPs2oneKG[CHR,LOC][0][1]

				if abs(addSNP_AFinEUR - INTROfreq) < abs((1 - addSNP_AFinEUR) - INTROfreq):
					INTROallele = addSNPs2oneKG[CHR,LOC][0][1] # intorgressed allele must be ALT
					oneKGstatus = 'ALT'
					nonINTROallele = addSNPs2oneKG[CHR,LOC][0][0]
				else:
					INTROallele = addSNPs2oneKG[CHR,LOC][0][0] # intorgressed allele must be REF
					oneKGstatus = 'REF'
					nonINTROallele = addSNPs2oneKG[CHR,LOC][0][1]

				if oneKGstatus == 'ALT':
					INTRO_AFinAFR = addSNP_AFinAFR
				elif oneKGstatus =='REF' :
					INTRO_AFinAFR = 1 - addSNP_AFinAFR

				if INTROallele == ancAllele:
					raaEUR.append((CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,INTRO_AFinAFR,ancAllele,oneKGstatus,V16_LD_hap))
				else:
					candidate_rhaEUR.append((CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,INTRO_AFinAFR,ancAllele,oneKGstatus,V16_LD_hap))

			if i[0]=='SAS':
				INTROfreq = i[6]
				V16_LD_hap = i[5]
				REF = addSNPs2oneKG[CHR,LOC][0][0]
				ALT = addSNPs2oneKG[CHR,LOC][0][1]

				if abs(addSNP_AFinSAS - INTROfreq) < abs((1 - addSNP_AFinSAS) - INTROfreq):
					INTROallele = addSNPs2oneKG[CHR,LOC][0][1] # intorgressed allele must be ALT
					oneKGstatus = 'ALT'
					nonINTROallele = addSNPs2oneKG[CHR,LOC][0][0]
				else:
					INTROallele = addSNPs2oneKG[CHR,LOC][0][0] # intorgressed allele must be REF
					oneKGstatus = 'REF'
					nonINTROallele = addSNPs2oneKG[CHR,LOC][0][1]

				if oneKGstatus == 'ALT':
					INTRO_AFinAFR = addSNP_AFinAFR
				elif oneKGstatus =='REF' :
					INTRO_AFinAFR = 1 - addSNP_AFinAFR

				if INTROallele == ancAllele:
					raaSAS.append((CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,INTRO_AFinAFR,ancAllele,oneKGstatus,V16_LD_hap))
				else:
					candidate_rhaSAS.append((CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,INTRO_AFinAFR,ancAllele,oneKGstatus,V16_LD_hap))
					
			else:
				continue

		else:
			continue

##consolidate candidate RAs...
print("consolidating candidate RAs...")

for i in candidate_rhaEAS:

	if (i[0], i[1]) in addSNPs2Altai:
		AltaiAF = addSNPs2Altai[i[0], i[1]][0][2]
		if AltaiAF =='0':
			Altaigeno = addSNPs2Altai[i[0], i[1]][0][0]
		elif AltaiAF == '2':
			Altaigeno = addSNPs2Altai[i[0], i[1]][0][1]
		elif AltaiAF == '1':
			Altaigeno = addSNPs2Altai[i[0], i[1]][0][0] + '/' + addSNPs2Altai[i[0], i[1]][0][1]
	else:
		Altaigeno = "undet."
	raEAS.append((i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],Altaigeno,i[8],i[10]))	# (CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,introAFinAFR, Altai genotype, ancAllele, V16_LD_hap)

for i in candidate_rhaEUR:

	if (i[0], i[1]) in addSNPs2Altai:
		AltaiAF = addSNPs2Altai[i[0], i[1]][0][2]
		if AltaiAF =='0':
			Altaigeno = addSNPs2Altai[i[0], i[1]][0][0]
		elif AltaiAF == '2':
			Altaigeno = addSNPs2Altai[i[0], i[1]][0][1]
		elif AltaiAF == '1':
			Altaigeno = addSNPs2Altai[i[0], i[1]][0][0] + '/' + addSNPs2Altai[i[0], i[1]][0][1]
	else:
		Altaigeno = "undet."
	raEUR.append((i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],Altaigeno,i[8],i[10]))	# (CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,introAFinAFR, Altai genotype, ancAllele, V16_LD_hap)

for i in candidate_rhaSAS:

	if (i[0], i[1]) in addSNPs2Altai:
		AltaiAF = addSNPs2Altai[i[0], i[1]][0][2]
		if AltaiAF =='0':
			Altaigeno = addSNPs2Altai[i[0], i[1]][0][0]
		elif AltaiAF == '2':
			Altaigeno = addSNPs2Altai[i[0], i[1]][0][1]
		elif AltaiAF == '1':
			Altaigeno = addSNPs2Altai[i[0], i[1]][0][0] + '/' + addSNPs2Altai[i[0], i[1]][0][1]
	else:
		Altaigeno = "undet."
	raSAS.append((i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],Altaigeno,i[8],i[10]))	# (CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,introAFinAFR, Altai genotype, ancAllele, V16_LD_hap)

RAAOUTPUTLISTS = ['raaEAS', 'raaEUR', 'raaSAS']

for list in RAAOUTPUTLISTS:
	
	outfn = "../results/" + list + "_r2_" + str(minrequiredLD) + ".txt"
	outfile = open(outfn, 'w')
	
	cwd = os.getcwd()
	PREAMBLE = "File generated by : " + os.path.realpath(__file__)
	outfile.write('#1#{}\n'.format(PREAMBLE))
	README = "List of reintroduced ancestral alleles"
	outfile.write('#2#{}\n'.format(README))
	col = ['CHR','LOC','REF','ALT','nonINTROallele','INTROallele','INTROfreq','INTRO_AFinAFR','ancAllele','V16haplotype', 'inout_V16haplo']
	outfile.write('#3#{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\n'.format(col[0], col[1], col[2], col[3], col[4], col[5], col[6], col[7], col[8], col[9], col[10]))
	listvar = eval(list)
	for item in listvar:	#CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,INTRO_AFinAFR,ancAllele,oneKGstatus,V16_LD_hap
		hapstart = int(item[10].split('_')[1])
		hapend = int(item[10].split('_')[2])
		if (item[1] < hapstart) or (item[1] > hapend): inout = "out"
		else: inout = "in"
		outfile.write('{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\n'.format(item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[10], inout))
	outfile.close()
	print("../results/" + list + "_r2_" + str(minrequiredLD) + ".txt" + " written")

	
RAOUTPUTLISTS = ['raEAS', 'raEUR', 'raSAS']

for list in RAOUTPUTLISTS:
	
	outfn = "../results/candidate_" + list + "_r2_" + str(minrequiredLD) + ".txt"
	outfile = open(outfn, 'w')
	
	cwd = os.getcwd()
	PREAMBLE = "File generated by : " + os.path.realpath(__file__)
	outfile.write('#1#{}\n'.format(PREAMBLE))
	README = "List of reintroduced lost allele candidates; output should be further filtered on desired criteria..."
	outfile.write('#2#{}\n'.format(README))
	col = ['CHR','LOC','REF','ALT','nonINTROallele','INTROallele','INTROfreq','INTRO_AFinAFR','ancAllele','V16haplotype','Altai genotype', 'inout_V16haplo']
	outfile.write('#3#{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\n'.format(col[0], col[1], col[2], col[3], col[4], col[5], col[6], col[7], col[8], col[9], col[10], col[11]))
	listvar = eval(list)
	for item in listvar:	#CHR,LOC,REF,ALT,nonINTROallele,INTROallele,INTROfreq,introAFinAFR, Altai genotype, ancAllele, V16_LD_hap
		hapstart = int(item[10].split('_')[1])
		hapend = int(item[10].split('_')[2])
		if (item[1] < hapstart) or (item[1] > hapend): inout = "out"
		else: inout = "in"
		outfile.write('{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\n'.format(item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[9], item[10], item[8], inout))
	outfile.close()
	print("../results/candidate_" + list + "_r2_" + str(minrequiredLD) + ".txt" + " written")
